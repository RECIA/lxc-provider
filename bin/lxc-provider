#!/bin/bash

export LANGUAGE=""
export LC_ALL=""
export LANG=""

Conf=/lxc/etc/general.conf
. ${Conf}
. ${lxc_PATH_LIBEXEC}/functions.sh

if [[ -z $2 ]]
then
	container=${lxc_DEFAULT_VPS}
else
	container=$2
fi

localusage() {
	myname=$(basename $0)
	echo "Usage:"
	echo "${myname} create rootdistro/distro/release[/specif/../..] [-a ARCH] [-i IP] -n NAME : creates container"
	echo "${myname} list : lists available containers"
	echo "${myname} listconf : lists possible containers"
	echo "${myname} destroy rootdistro/distro/release[/specif/../..] -a ARCH  : deletes template"
	echo "${myname} debuginfo rootdistro/distro/release[/specif/../..] [-a ARCH] [-i IP] -n NAME : shows env vars used by scripts"
	exit 0
}

OPTIND=3
while getopts "a:i:n:h" option; do
        echo "$option ${OPTARG}"
        case "$option" in
                h) localusage ;;
                i) lxc_CONTAINER_IP="${OPTARG}" ;;
                n) lxc_CONTAINER_NAME="${OPTARG}" ;;
                a) ARCH="${OPTARG}" ;;
                *) localusage ;;
        esac
done

eval "$(${lxc_PATH_LIBEXEC}/cfg_parse.sh ${Conf} provisioning ${template})"
[[ -n $ARCH ]] && lxc_ARCH=$ARCH



#Exploding string
string=${container}
oldIFS=$IFS
IFS=/
container_array=( $string )
IFS=$oldIFS

lxc_RELEASE=${container_array[2]}

lxc_CONTAINER_ROOTFS="${lxc_PATH_ROOTFS}/${lxc_CONTAINER_NAME}"
lxc_TMP_ROOTFS="${lxc_PATH_TMP}/provisioning/${lxc_CONTAINER_NAME}"
lxc_TMP_CONFIGDIR="${lxc_PATH_TMP}/provisioning/${lxc_CONTAINER_NAME}-config"
lxc_TEMPLATE_ROOTFS="${lxc_PATH_TEMPLATE}/${container}/${lxc_ARCH}"
export ${!lxc_*}

f_create() {
	[[ -d ${lxc_TEMPLATE_ROOTFS} ]] || die "The template ${lxc_TEMPLATE_ROOTFS} is not available"
	[[ -d ${lxc_CONTAINER_ROOTFS} ]] && die "Rootfs dir ${lxc_CONTAINER_ROOTFS} already exists"

	#@TODO make overwrite of the TMP_ROOTFS an option
	mkdir -p ${lxc_TMP_ROOTFS} && rm -rf ${lxc_TMP_ROOTFS}
	cp -a ${lxc_TEMPLATE_ROOTFS} ${lxc_TMP_ROOTFS} || die "cp -a ${lxc_TEMPLATE_ROOTFS} ${lxc_TMP_ROOTFS} : failed"
	[[ -d ${lxc_TMP_CONFIGDIR} ]] || rm -rf ${lxc_TMP_CONFIGDIR}
	mkdir -p ${lxc_TMP_CONFIGDIR}
	
	for script in $(${lxc_PATH_LIBEXEC}/get_scripts.sh ${Conf} provisioning ${container})
	do
		echo "Executing ${script}"
		${script} || die "${script} failed"
	done
	 
	#OK commit cache
	mkdir -p ${lxc_CONTAINER_ROOTFS}
	rm -rf ${lxc_CONTAINER_ROOTFS}
	mv "${lxc_TMP_ROOTFS}" "${lxc_CONTAINER_ROOTFS}" || die "mv ${lxc_TMP_ROOTFS} ${lxc_CONTAINER_ROOTFS} failed"
	lxc-create -n ${lxc_CONTAINER_NAME} -f ${lxc_TMP_CONFIGDIR}/config || die "Failed to create '${lxc_CONTAINER_NAME}'"
}

f_list() {
	ls -lah ${lxc_GLOBAL_CACHE_HOME}
}

f_destroy() {
	echo "Not implemented, rm directly from ${lxc_GLOBAL_CACHE_HOME}"
}

f_debuginfo() {
	for var in ${!lxc_*}
	do
		echo -e "${var}=${color_Yellow}${!var}${color_None}"
	done
}

case $1 in
	create) 	f_create ;;
	list)		f_list ;;
	destroy)	f_destroy ;;
	debuginfo)	f_debuginfo ;;	
	*) localusage ;;
esac

exit 0

